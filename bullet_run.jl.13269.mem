        - #module ws
        - num_trials = 1
        - epochs = 5
        - in_size = 22; out_size = 6
        - T = Float32
        - 
        - 
        - using SharedArrays
        - using Distributed
        - #addprocs(num_trials)
        - 
        - @everywhere using Revise
        - @everywhere using PyCall
        - @everywhere using Random
        - 
        - 
        - @everywhere include("seajul.jl")
        - 
        - Wa = SharedArray{T}(num_trials, out_size, in_size)
        - ra = SharedArray{T}(num_trials, epochs)
        - #@sync @distributed
  5983380 for i in 1:num_trials
        0     seed = rand(1:2^16)
        0     Random.seed!(seed)
        0     gym = pyimport("gym")
        0     pyimport("pybullet_envs")
       32     env = gym.make("Walker2DBulletEnv-v0")
        - 
   648947     W = zeros(T, out_size, in_size)
   160877     W,rews = SJ.ars_v1t!(env,W,epochs)
 11895505     Wa[i,:,:] = W 
  5765071     ra[i,:] = rews
        - end
        - #@time W,rews = SJ.ars_v1t!(env,W,num_epochs=10)
        - 
        - # function do_rollout_eval(env::PyObject, W)
        - #     x = env.reset()
        - #     done = false
        - #     reward = 0.0
        - 
        - #     x_hist = zeros(env.observation_space.shape[1],env._max_episode_steps)
        - #     i = 1
        - 
        - #     act_low = convert(Array{Float64,1}, env.action_space.low)
        - #     act_high = convert(Array{Float64,1}, env.action_space.high)
        - 
        - #     while !done
        - #         x_hist[:,i] = copy(x); i+=1
        - #         print(W*x)
        - #         u = clamp(W*x, act_low, act_high)
        - #         x, r, done, _ = env.step(u)
        - #         reward += r
        - #     end
        - #     #println(vec(mean(x_hist[:,1:i-1],dims=2)))
        - #     return reward, x_hist
        - # end
        - 
        - # R,X = do_rollout_eval(env,W)
        - 
        - #end
        - 
        - 
        - 
        - # import Pkg
        - # function pycall_activate(env_name)
        - #     ENV["Python"] = "/home/sgillen/miniconda3/envs/$(env_name)/bin/python"
        - #     Pkg.build("PyCall")
        - #     println("restart Julia now dummy")
        - 
        - # end
        - 
        - # pycall_activate("stable")
        - 
        - 
        - 
        - # function f2(a)
        - #     return sum(a)
        - # end
        - 
        - # function f(a::Array{<:AbstractFloat,1})
        - #     return sum(a)
        - # end
        - 
        - # function g(a::Array{Float64,1})
        - #     return sum(a)
        - # end
        - 
        - # function h(a::Array{AbstractFloat,1})
        - #     return sum(a)
        - # end
